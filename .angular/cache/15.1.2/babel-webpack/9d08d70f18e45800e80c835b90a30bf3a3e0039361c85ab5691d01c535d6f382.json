{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction LoginComponent_div_14_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 18);\n    i0.ɵɵtext(1, \" El email es requerido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_14_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 18);\n    i0.ɵɵtext(1, \" El formato del email debe ser v\\u00E1lido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, LoginComponent_div_14_p_1_Template, 2, 0, \"p\", 17);\n    i0.ɵɵtemplate(2, LoginComponent_div_14_p_2_Template, 2, 0, \"p\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.Mail == null ? null : ctx_r0.Mail.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.Mail == null ? null : ctx_r0.Mail.hasError(\"email\"));\n  }\n}\nfunction LoginComponent_div_18_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 18);\n    i0.ɵɵtext(1, \" El password es requerido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_18_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 18);\n    i0.ɵɵtext(1, \" El password debe ser de 8 o m\\u00E1s caracteres. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, LoginComponent_div_18_p_1_Template, 2, 0, \"p\", 17);\n    i0.ɵɵtemplate(2, LoginComponent_div_18_p_2_Template, 2, 0, \"p\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.Password == null ? null : ctx_r1.Password.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.Password == null ? null : ctx_r1.Password.errors == null ? null : ctx_r1.Password.errors.minlength);\n  }\n}\nexport class LoginComponent {\n  // Inyectar en el constructor el formBuilder\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    ///Creamos el grupo de controles para el formulario de login\n    this.form = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(minLength, 8), ValidatorFn]],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n  ngOnInit() {}\n  get Password() {\n    return this.form.get(\"password\");\n  }\n  get Mail() {\n    return this.form.get(\"email\");\n  }\n  get PasswordValid() {\n    return this.Password?.touched && !this.Password?.valid;\n  }\n  get MailValid() {\n    return false;\n  }\n  onEnviar(event) {\n    // Detenemos la propagación o ejecución del compotamiento submit de un form\n    event.preventDefault;\n    if (this.form.valid) {\n      // Llamamos a nuestro servicio para enviar los datos al servidor\n      // También podríamos ejecutar alguna lógica extra\n      alert(\"Todo salio bien ¡Enviar formuario!\");\n    } else {\n      // Corremos todas las validaciones para que se ejecuten los mensajes de error en el template     \n      this.form.markAllAsTouched();\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 24,\n  vars: 5,\n  consts: [[\"id\", \"loginModal\", \"tabindex\", \"-1\", \"aria-labelledby\", \"loginModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", \"fade\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"id\", \"loginModalLabel\", 1, \"modal-title\", \"fs-5\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"btn-close\"], [1, \"modal-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"exampleInputEmail1\", \"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"exampleInputEmail1\", \"aria-describedby\", \"emailHelp\", \"formControlName\", \"email\", 1, \"form-control\"], [4, \"ngIf\"], [\"for\", \"exampleInputPassword1\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"exampleInputPassword1\", \"formControlName\", \"password\", 1, \"form-control\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"btn\", \"btn-secondary\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"class\", \"error\", 4, \"ngIf\"], [1, \"error\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n      i0.ɵɵtext(5, \"Iniciar sesion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"button\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 6)(8, \"form\", 7);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_8_listener($event) {\n        return ctx.onEnviar($event);\n      });\n      i0.ɵɵelementStart(9, \"div\", 8)(10, \"label\", 9);\n      i0.ɵɵtext(11, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 10);\n      i0.ɵɵelementStart(13, \"div\", 8);\n      i0.ɵɵtemplate(14, LoginComponent_div_14_Template, 3, 2, \"div\", 11);\n      i0.ɵɵelementStart(15, \"label\", 12);\n      i0.ɵɵtext(16, \"Contrase\\u00F1a\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, LoginComponent_div_18_Template, 3, 2, \"div\", 11);\n      i0.ɵɵelementStart(19, \"div\", 14)(20, \"button\", 15);\n      i0.ɵɵtext(21, \"Cerrar\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"button\", 16);\n      i0.ɵɵtext(23, \"Guardar\");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Mail == null ? null : ctx.Mail.errors) && (ctx.Mail == null ? null : ctx.Mail.touched));\n      i0.ɵɵadvance(3);\n      i0.ɵɵclassProp(\"border-danger\", ctx.MailValid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Password == null ? null : ctx.Password.errors) && (ctx.Password == null ? null : ctx.Password.touched));\n    }\n  },\n  dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;ICoB3CC,6BAAoD;IAChDA,wCACJ;IAAAA,iBAAI;;;;;IACJA,6BAAiD;IAC7CA,4DACF;IAAAA,iBAAI;;;;;IANRA,2BAA4C;IAC1CA,mEAEI;IACJA,mEAEM;IACVA,iBAAM;;;;IANEA,eAAgC;IAAhCA,oFAAgC;IAGhCA,eAA6B;IAA7BA,iFAA6B;;;;;IAYnDA,6BAAwD;IACtDA,2CACF;IAAAA,iBAAI;;;;;IACJA,6BACY;IACVA,kEACF;IAAAA,iBAAI;;;;;IAPNA,2BAAoD;IAClDA,mEAEI;IACJA,mEAGI;IACNA,iBAAM;;;;IAPAA,eAAoC;IAApCA,4FAAoC;IAGpCA,eAAiC;IAAjCA,gIAAiC;;;AD/B3C,OAAM,MAAOC,cAAc;EAEzB;EACAC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAC7B;IACA,IAAI,CAACC,IAAI,GAAE,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MAChCC,QAAQ,EAAC,CAAC,EAAE,EAAC,CAACP,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACS,SAAS,CAACA,SAAS,EAAE,CAAC,CAAC,EAAEC,WAAW,CAAC,CAAC;MACpFC,KAAK,EAAC,CAAC,EAAE,EAAE,CAACX,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACW,KAAK,CAAC;KACpD,CAAC;EACH;EAEAC,QAAQ,IAAI;EAEZ,IAAIC,QAAQ;IACV,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAC,UAAU,CAAC;EAClC;EAEA,IAAIC,IAAI;IACP,OAAO,IAAI,CAACV,IAAI,CAACS,GAAG,CAAC,OAAO,CAAC;EAC9B;EAEA,IAAIE,aAAa;IACf,OAAO,IAAI,CAACH,QAAQ,EAAEI,OAAO,IAAI,CAAC,IAAI,CAACJ,QAAQ,EAAEK,KAAK;EACxD;EAEA,IAAIC,SAAS;IACX,OAAO,KAAK;EACd;EAGAC,QAAQ,CAACC,KAAY;IACnB;IACAA,KAAK,CAACC,cAAc;IAEpB,IAAI,IAAI,CAACjB,IAAI,CAACa,KAAK,EAAC;MAClB;MACA;MACAK,KAAK,CAAC,oCAAoC,CAAC;KAC5C,MAAI;MACH;MACA,IAAI,CAAClB,IAAI,CAACmB,gBAAgB,EAAE;;EAGhC;;AA3CWtB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAuB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCNrB5B,8BAA2G;MAIjDA,8BAAc;MAAAA,iBAAK;MACrEA,4BAA4F;MAC9FA,iBAAM;MAKFA,8BAAwB;MACEA;QAAA,OAAY6B,oBAAgB;MAAA,EAAC;MACnD7B,8BAAkB;MACgDA,sBAAK;MAAAA,iBAAQ;MAC7EA,6BAAsH;MACxHA,+BAAkB;MAEhBA,kEAOI;MAIJA,kCAAsD;MAAAA,gCAAU;MAAAA,iBAAQ;MACxEA,6BAAoI;MACtIA,iBAAM;MAEtBA,kEAQM;MACEA,gCAA0B;MACgDA,uBAAM;MAAAA,iBAAS;MAEvFA,mCAA8C;MAAAA,wBAAO;MAAAA,iBAAS;;;MAjCtDA,eAAkB;MAAlBA,oCAAkB;MAMZA,eAAoC;MAApCA,kHAAoC;MAYwDA,eAAiC;MAAjCA,8CAAiC;MAG/IA,eAA4C;MAA5CA,kIAA4C","names":["Validators","i0","LoginComponent","constructor","formBuilder","form","group","password","required","minLength","ValidatorFn","email","ngOnInit","Password","get","Mail","PasswordValid","touched","valid","MailValid","onEnviar","event","preventDefault","alert","markAllAsTouched","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Martin\\Desktop\\maqueta\\portfolioangular\\src\\app\\modals\\login\\login.component.ts","C:\\Users\\Martin\\Desktop\\maqueta\\portfolioangular\\src\\app\\modals\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit{\n  form: FormGroup;\n  // Inyectar en el constructor el formBuilder\n  constructor(private formBuilder: FormBuilder){ \n    ///Creamos el grupo de controles para el formulario de login\n    this.form= this.formBuilder.group({\n      password:['',[Validators.required, Validators.minLength(minLength: 8): ValidatorFn]],\n      email:['', [Validators.required, Validators.email]],\n   })\n  }\n\n  ngOnInit() {}\n\n  get Password(){\n    return this.form.get(\"password\");\n  }\n \n  get Mail(){\n   return this.form.get(\"email\");\n  }\n\n  get PasswordValid(){\n    return this.Password?.touched && !this.Password?.valid;\n  }\n\n  get MailValid() {\n    return false\n  }\n \n\n  onEnviar(event: Event){\n    // Detenemos la propagación o ejecución del compotamiento submit de un form\n    event.preventDefault; \n \n    if (this.form.valid){\n      // Llamamos a nuestro servicio para enviar los datos al servidor\n      // También podríamos ejecutar alguna lógica extra\n      alert(\"Todo salio bien ¡Enviar formuario!\")\n    }else{\n      // Corremos todas las validaciones para que se ejecuten los mensajes de error en el template     \n      this.form.markAllAsTouched(); \n    }\n \n  }\n\n}\n"," <!-- modales -->\n      <!-- Modal login -->\n      <div class=\"modal fade\" id=\"loginModal\" tabindex=\"-1\" aria-labelledby=\"loginModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h1 class=\"modal-title fs-5\" id=\"loginModalLabel\">Iniciar sesion</h1>\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n            \n    \n    \n                <!-- formulario/login/-->\n                <div class=\"modal-body\">\n                <form [formGroup]=\"form\"  (ngSubmit)=\"onEnviar($event)\">\n                    <div class=\"mb-3\">\n                      <label for=\"exampleInputEmail1\" class=\"form-label\"  for=\"email\">Email</label>\n                      <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" formControlName=\"email\">\n                    <div class=\"mb-3\">\n\n                      <div *ngIf=\"Mail?.errors  && Mail?.touched\">    \n                        <p *ngIf=\"Mail?.hasError('required')\" class=\"error\">\n                            El email es requerido.\n                        </p>\n                        <p *ngIf=\"Mail?.hasError('email')\" class=\"error\">\n                            El formato del email debe ser válido.\n                          </p>\n                    </div>\n\n\n\n                      <label for=\"exampleInputPassword1\" class=\"form-label\">Contraseña</label>\n                      <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" formControlName=\"password\" [class.border-danger]=\"MailValid\">\n                    </div>\n            <!-- Gracias al getter que configuramos en el controlador -->\n    <div *ngIf=\"Password?.errors  && Password?.touched\">\n      <p *ngIf=\"Password?.hasError('required')\" class=\"error\">\n        El password es requerido.\n      </p>\n      <p *ngIf=\"Password?.errors?.minlength\n  \" class=\"error\">\n        El password debe ser de 8 o más caracteres.\n      </p>\n    </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cerrar</button>\n              \n              <button type=\"submit\" class=\"btn btn-primary\">Guardar</button>\n                  \n            </div>\n       \n          </div>\n        </form>\n        </div>\n        </div>\n      </div>\n \n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}