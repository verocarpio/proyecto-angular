{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class BotonLoginComponent {\n  // Inyectar en el constructor el formBuilder\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    ///Creamos el grupo de controles para el formulario de login\n    this.form = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n  ngOnInit() {}\n  get Password() {\n    return this.form.get(\"password\");\n  }\n  get Mail() {\n    return this.form.get(\"email\");\n  }\n  get PasswordValid() {\n    return this.Password?.touched && !this.Password?.valid;\n  }\n  get MailValid() {\n    return false;\n  }\n  onEnviar(event) {\n    // Detenemos la propagación o ejecución del compotamiento submit de un form\n    event.preventDefault;\n    if (this.form.valid) {\n      // Llamamos a nuestro servicio para enviar los datos al servidor\n      // También podríamos ejecutar alguna lógica extra\n      alert(\"Todo salio bien ¡Enviar formuario!\");\n    } else {\n      // Corremos todas las validaciones para que se ejecuten los mensajes de error en el template     \n      this.form.markAllAsTouched();\n    }\n  }\n}\nBotonLoginComponent.ɵfac = function BotonLoginComponent_Factory(t) {\n  return new (t || BotonLoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nBotonLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BotonLoginComponent,\n  selectors: [[\"app-boton-login\"]],\n  decls: 15,\n  vars: 0,\n  consts: [[\"type\", \"button\", \"data-bs-toggle\", \"modal\", \"data-bs-target\", \"#loginModal\", 1, \"btn-btn-light\"], [1, \"fa-solid\", \"fa-lock\"], [1, \"modal-body\"], [1, \"mb-3\"], [\"for\", \"exampleInputEmail1\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"exampleInputEmail1\", \"aria-describedby\", \"emailHelp\", 1, \"form-control\"], [\"for\", \"exampleInputPassword1\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"exampleInputPassword1\", 1, \"form-control\"]],\n  template: function BotonLoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n      i0.ɵɵelement(2, \"i\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 0);\n      i0.ɵɵelement(4, \"i\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 2)(6, \"form\")(7, \"div\", 3)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 5);\n      i0.ɵɵelementStart(11, \"div\", 3)(12, \"label\", 6);\n      i0.ɵɵtext(13, \"Contrase\\u00F1a\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 7);\n      i0.ɵɵelementEnd()()()()();\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;AAMnE,OAAM,MAAOC,mBAAmB;EAG5B;EACAC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAE7B;IACF,IAAI,CAACC,IAAI,GAAE,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MAChCC,QAAQ,EAAC,CAAC,EAAE,EAAC,CAACN,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5DC,KAAK,EAAC,CAAC,EAAE,EAAE,CAACT,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACS,KAAK,CAAC;KACpD,CAAC;EACF;EAEAC,QAAQ,IAAI;EAEZ,IAAIC,QAAQ;IACV,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,UAAU,CAAC;EAClC;EAEA,IAAIC,IAAI;IACP,OAAO,IAAI,CAACT,IAAI,CAACQ,GAAG,CAAC,OAAO,CAAC;EAC9B;EAEA,IAAIE,aAAa;IACf,OAAO,IAAI,CAACH,QAAQ,EAAEI,OAAO,IAAI,CAAC,IAAI,CAACJ,QAAQ,EAAEK,KAAK;EACxD;EAEA,IAAIC,SAAS;IACX,OAAO,KAAK;EACd;EAGAC,QAAQ,CAACC,KAAY;IACnB;IACAA,KAAK,CAACC,cAAc;IAEpB,IAAI,IAAI,CAAChB,IAAI,CAACY,KAAK,EAAC;MAClB;MACA;MACAK,KAAK,CAAC,oCAAoC,CAAC;KAC5C,MAAI;MACH;MACA,IAAI,CAACjB,IAAI,CAACkB,gBAAgB,EAAE;;EAGhC;;AA7CUrB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCJdC,2BAAK;MAEHA,uBAAgC;MAClCA,iBAAS;MAGTA,iCAC6B;MAC7BA,uBAAgC;MAC/BA,iBAAS;MAEZA,8BAAwB;MAGmCA,qBAAK;MAAAA,iBAAQ;MAChEA,4BAA8F;MAChGA,+BAAkB;MACsCA,gCAAU;MAAAA,iBAAQ;MACxEA,4BAAuE;MACzEA,iBAAM","names":["Validators","BotonLoginComponent","constructor","formBuilder","form","group","password","required","minLength","email","ngOnInit","Password","get","Mail","PasswordValid","touched","valid","MailValid","onEnviar","event","preventDefault","alert","markAllAsTouched","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Martin\\Desktop\\maqueta\\portfolioangular\\src\\app\\boton-login\\boton-login.component.ts","C:\\Users\\Martin\\Desktop\\maqueta\\portfolioangular\\src\\app\\boton-login\\boton-login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n@Component({\n  selector: 'app-boton-login',\n  templateUrl: './boton-login.component.html',\n  styleUrls: ['./boton-login.component.css']\n})\nexport class BotonLoginComponent implements OnInit{\n  form: FormGroup;\n\n    // Inyectar en el constructor el formBuilder\n    constructor(private formBuilder: FormBuilder){\n\n      ///Creamos el grupo de controles para el formulario de login\n    this.form= this.formBuilder.group({\n      password:['',[Validators.required, Validators.minLength(8)]],\n      email:['', [Validators.required, Validators.email]],\n   })\n   }\n  \n   ngOnInit() {}\n\n   get Password(){\n     return this.form.get(\"password\");\n   }\n  \n   get Mail(){\n    return this.form.get(\"email\");\n   }\n \n   get PasswordValid(){\n     return this.Password?.touched && !this.Password?.valid;\n   }\n \n   get MailValid() {\n     return false\n   }\n  \n \n   onEnviar(event: Event){\n     // Detenemos la propagación o ejecución del compotamiento submit de un form\n     event.preventDefault; \n  \n     if (this.form.valid){\n       // Llamamos a nuestro servicio para enviar los datos al servidor\n       // También podríamos ejecutar alguna lógica extra\n       alert(\"Todo salio bien ¡Enviar formuario!\")\n     }else{\n       // Corremos todas las validaciones para que se ejecuten los mensajes de error en el template     \n       this.form.markAllAsTouched(); \n     }\n  \n   }\n \n \n }\n\n\n\n","\n <!-- botones para login -->\n                  <!-- Button trigger modal -->\n                  <div>\n                  <button type=\"button\" class=\"btn-btn-light\" data-bs-toggle=\"modal\"data-bs-target=\"#loginModal\">\n                    <i class=\"fa-solid fa-lock\"></i>\n                  </button>\n                 \n              \n                  <button type=\"button\" class=\"btn-btn-light\" data-bs-toggle=\"modal\"\n                  data-bs-target=\"#loginModal\">\n                  <i class=\"fa-solid fa-lock\"></i>\n                   </button>\n                   <!-- formulario/login/-->\n                <div class=\"modal-body\">\n                  <form>\n                      <div class=\"mb-3\">\n                        <label for=\"exampleInputEmail1\" class=\"form-label\">Email</label>\n                        <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\">\n                      <div class=\"mb-3\">\n                        <label for=\"exampleInputPassword1\" class=\"form-label\">Contraseña</label>\n                        <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\">\n                      </div>\n                    </div>\n                    </form>\n                  </div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}